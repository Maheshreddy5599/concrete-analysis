Jupyter Notebook
Untitled16
Last Checkpoint: 3 minutes ago
(unsaved changes)
Current Kernel Logo
Python 3 
File
Edit
View
Insert
Cell
Kernel
Widgets
Help

# -*- coding: utf-8 -*-
"""
Created on Wed Apr  8 22:35:00 2020
​
@author: vikaa
"""
​
import warnings
warnings.filterwarnings("ignore")
​
import pandas as pd
orig_data = pd.read_csv("concrete.csv")
print(orig_data.head())
data = orig_data.copy()
print(data.shape)
print(data.info())
print(data.describe().T)
#Changing column headers to just keep component names
data.columns = [col[:col.find("(")].strip() for col in data.columns]
print(data.head())
from sklearn.model_selection import train_test_split
x_train, x_test, y_train, y_test = train_test_split(data[data.columns[:-1]],
                                                    data[[data.columns[-1]]],
                                                    test_size = .2,
                                                    random_state = 1)
from pandas.plotting import scatter_matrix
import matplotlib.pyplot as plt
sm = scatter_matrix(x_train, figsize=(15,15), diagonal = 'kde')
#Changing label rotation
[s.xaxis.label.set_rotation(45) for s in sm.reshape(-1)]
[s.yaxis.label.set_rotation(45) for s in sm.reshape(-1)]
#Changing offset for label
[s.get_yaxis().set_label_coords(-0.5,0.5) for s in sm.reshape(-1)]
#Hiding ticks
[s.set_xticks(()) for s in sm.reshape(-1)]
[s.set_yticks(()) for s in sm.reshape(-1)]
plt.show()
import seaborn as sns
sns.heatmap(x_train.corr().abs())
plt.show()
​
#Scaling the features
from sklearn.preprocessing import StandardScaler
scaler = StandardScaler().fit(x_train)
x_train_scaled = pd.DataFrame(scaler.transform(x_train),
                              columns = x_train.columns)
x_train_scaled.head()
​
​
​
#We will save the model performance metrics in a DataFrame
from sklearn.metrics import mean_squared_error, r2_score
from sklearn.model_selection import KFold, cross_val_score
import numpy as np
Model = []
RMSE = []
R_sq = []
cv = KFold(5, random_state = 1)
​
#Creating a Function to append the cross validation scores of the algorithms
def input_scores(name, model, x, y):
    Model.append(name)
    RMSE.append(np.sqrt((-1) * cross_val_score(model, x, y, cv=cv, 
                                               scoring='neg_mean_squared_error').mean()))
    R_sq.append(cross_val_score(model, x, y, cv=cv, scoring='r2').mean())
​
​
from sklearn.linear_model import LinearRegression, Ridge, Lasso
from sklearn.neighbors import KNeighborsRegressor
from sklearn.tree import DecisionTreeRegressor
from sklearn.ensemble import (RandomForestRegressor, GradientBoostingRegressor, 
                              AdaBoostRegressor)
​
names = ['Linear Regression', 'Ridge Regression', 'Lasso Regression',
         'K Neighbors Regressor', 'Decision Tree Regressor', 
         'Random Forest Regressor', 'Gradient Boosting Regressor',
         'Adaboost Regressor']
models = [LinearRegression(), Ridge(), Lasso(),
          KNeighborsRegressor(), DecisionTreeRegressor(),
          RandomForestRegressor(), GradientBoostingRegressor(), 
          AdaBoostRegressor()]
​
#Running all algorithms
for name, model in zip(names, models):
    input_scores(name, model, x_train_scaled, y_train)
    
    
    
evaluation = pd.DataFrame({'Model': Model,
                           'RMSE': RMSE,
                           'R Squared': R_sq})
print("FOLLOWING ARE THE TRAINING SCORES: ")
print(evaluation)    
​
#tuning this base model
GradientBoostingRegressor()
​
​
#tuning for number of trees
from sklearn.model_selection import GridSearchCV
param_grid = {'n_estimators':range(20,1001,10),
              'max_depth':[10], #range(5,16,2), 
              'min_samples_split':[100], #range(200,1001,200), 
              'learning_rate':[0.2]}
clf = GridSearchCV(GradientBoostingRegressor(random_state=1), 
                   param_grid = param_grid, scoring='r2', 
                   cv=cv).fit(x_train_scaled, y_train)
print(clf.best_estimator_) 
print("R Squared:",clf.best_score_)
​
​
#tuning the tree specific parameters
param_grid = {'n_estimators': [230],
              'max_depth': range(10,31,2), 
              'min_samples_split': range(50,501,10), 
              'learning_rate':[0.2]}
clf = GridSearchCV(GradientBoostingRegressor(random_state=1), 
                   param_grid = param_grid, scoring='r2', 
                   cv=cv).fit(x_train_scaled, y_train)
print(clf.best_estimator_) 
print("R Squared:",clf.best_score_)
​
​
#now increasing number of trees and decreasing learning rate proportionally
clf = GradientBoostingRegressor(random_state=1, max_depth=20, 
                                min_samples_split=170, n_estimators=230*2, 
                                learning_rate=0.2/2)
print("R Squared:",cross_val_score(clf, x_train_scaled, y_train, cv=cv, scoring='r2').mean())
​
​
​
​
#applying this model on test data
x_test_scaled = pd.DataFrame(scaler.transform(x_test),
                             columns = x_test.columns)
clf = GradientBoostingRegressor(learning_rate=0.2/2, max_depth=20,
                                min_samples_split=170, n_estimators=230*2, 
                                random_state=1).fit(x_train_scaled, y_train)
print("Test RMSE: ", np.sqrt(mean_squared_error(y_test, clf.predict(x_test_scaled))))
print("Test R^2: ", r2_score(y_test, clf.predict(x_test_scaled)))
   Cement (component 1)(kg in a m^3 mixture)  \
0                                      540.0   
1                                      540.0   
2                                      332.5   
3                                      332.5   
4                                      198.6   

   Blast Furnace Slag (component 2)(kg in a m^3 mixture)  \
0                                                0.0       
1                                                0.0       
2                                              142.5       
3                                              142.5       
4                                              132.4       

   Fly Ash (component 3)(kg in a m^3 mixture)  \
0                                         0.0   
1                                         0.0   
2                                         0.0   
3                                         0.0   
4                                         0.0   

   Water  (component 4)(kg in a m^3 mixture)  \
0                                      162.0   
1                                      162.0   
2                                      228.0   
3                                      228.0   
4                                      192.0   

   Superplasticizer (component 5)(kg in a m^3 mixture)  \
0                                                2.5     
1                                                2.5     
2                                                0.0     
3                                                0.0     
4                                                0.0     

   Coarse Aggregate  (component 6)(kg in a m^3 mixture)  \
0                                             1040.0      
1                                             1055.0      
2                                              932.0      
3                                              932.0      
4                                              978.4      

   Fine Aggregate (component 7)(kg in a m^3 mixture)  Age (day)  \
0                                              676.0         28   
1                                              676.0         28   
2                                              594.0        270   
3                                              594.0        365   
4                                              825.5        360   

   Concrete compressive strength(MPa, megapascals)   
0                                             79.99  
1                                             61.89  
2                                             40.27  
3                                             41.05  
4                                             44.30  
(1030, 9)
<class 'pandas.core.frame.DataFrame'>
RangeIndex: 1030 entries, 0 to 1029
Data columns (total 9 columns):
Cement (component 1)(kg in a m^3 mixture)                1030 non-null float64
Blast Furnace Slag (component 2)(kg in a m^3 mixture)    1030 non-null float64
Fly Ash (component 3)(kg in a m^3 mixture)               1030 non-null float64
Water  (component 4)(kg in a m^3 mixture)                1030 non-null float64
Superplasticizer (component 5)(kg in a m^3 mixture)      1030 non-null float64
Coarse Aggregate  (component 6)(kg in a m^3 mixture)     1030 non-null float64
Fine Aggregate (component 7)(kg in a m^3 mixture)        1030 non-null float64
Age (day)                                                1030 non-null int64
Concrete compressive strength(MPa, megapascals)          1030 non-null float64
dtypes: float64(8), int64(1)
memory usage: 72.5 KB
None
                                                     count        mean  \
Cement (component 1)(kg in a m^3 mixture)           1030.0  281.167864   
Blast Furnace Slag (component 2)(kg in a m^3 mi...  1030.0   73.895825   
Fly Ash (component 3)(kg in a m^3 mixture)          1030.0   54.188350   
Water  (component 4)(kg in a m^3 mixture)           1030.0  181.567282   
Superplasticizer (component 5)(kg in a m^3 mixt...  1030.0    6.204660   
Coarse Aggregate  (component 6)(kg in a m^3 mix...  1030.0  972.918932   
Fine Aggregate (component 7)(kg in a m^3 mixture)   1030.0  773.580485   
Age (day)                                           1030.0   45.662136   
Concrete compressive strength(MPa, megapascals)     1030.0   35.817961   

                                                           std     min  \
Cement (component 1)(kg in a m^3 mixture)           104.506364  102.00   
Blast Furnace Slag (component 2)(kg in a m^3 mi...   86.279342    0.00   
Fly Ash (component 3)(kg in a m^3 mixture)           63.997004    0.00   
Water  (component 4)(kg in a m^3 mixture)            21.354219  121.80   
Superplasticizer (component 5)(kg in a m^3 mixt...    5.973841    0.00   
Coarse Aggregate  (component 6)(kg in a m^3 mix...   77.753954  801.00   
Fine Aggregate (component 7)(kg in a m^3 mixture)    80.175980  594.00   
Age (day)                                            63.169912    1.00   
Concrete compressive strength(MPa, megapascals)      16.705742    2.33   

                                                        25%      50%  \
Cement (component 1)(kg in a m^3 mixture)           192.375  272.900   
Blast Furnace Slag (component 2)(kg in a m^3 mi...    0.000   22.000   
Fly Ash (component 3)(kg in a m^3 mixture)            0.000    0.000   
Water  (component 4)(kg in a m^3 mixture)           164.900  185.000   
Superplasticizer (component 5)(kg in a m^3 mixt...    0.000    6.400   
Coarse Aggregate  (component 6)(kg in a m^3 mix...  932.000  968.000   
Fine Aggregate (component 7)(kg in a m^3 mixture)   730.950  779.500   
Age (day)                                             7.000   28.000   
Concrete compressive strength(MPa, megapascals)      23.710   34.445   

                                                         75%     max  
Cement (component 1)(kg in a m^3 mixture)            350.000   540.0  
Blast Furnace Slag (component 2)(kg in a m^3 mi...   142.950   359.4  
Fly Ash (component 3)(kg in a m^3 mixture)           118.300   200.1  
Water  (component 4)(kg in a m^3 mixture)            192.000   247.0  
Superplasticizer (component 5)(kg in a m^3 mixt...    10.200    32.2  
Coarse Aggregate  (component 6)(kg in a m^3 mix...  1029.400  1145.0  
Fine Aggregate (component 7)(kg in a m^3 mixture)    824.000   992.6  
Age (day)                                             56.000   365.0  
Concrete compressive strength(MPa, megapascals)       46.135    82.6  
   Cement  Blast Furnace Slag  Fly Ash  Water  Superplasticizer  \
0   540.0                 0.0      0.0  162.0               2.5   
1   540.0                 0.0      0.0  162.0               2.5   
2   332.5               142.5      0.0  228.0               0.0   
3   332.5               142.5      0.0  228.0               0.0   
4   198.6               132.4      0.0  192.0               0.0   

   Coarse Aggregate  Fine Aggregate  Age  Concrete compressive strength  
0            1040.0           676.0   28                          79.99  
1            1055.0           676.0   28                          61.89  
2             932.0           594.0  270                          40.27  
3             932.0           594.0  365                          41.05  
4             978.4           825.5  360                          44.30  
<Figure size 1500x1500 with 64 Axes>
<Figure size 640x480 with 2 Axes>

FOLLOWING ARE THE TRAINING SCORES: 
                         Model       RMSE  R Squared
0            Linear Regression  10.278166   0.625282
1             Ridge Regression  10.276215   0.625366
2             Lasso Regression  10.871002   0.580476
3        K Neighbors Regressor   9.144185   0.701923
4      Decision Tree Regressor   7.762151   0.792821
5      Random Forest Regressor   5.479876   0.887015
6  Gradient Boosting Regressor   5.168750   0.904305
7           Adaboost Regressor   7.654666   0.788138
